from PyQt5.QtCore import QObject, pyqtSignal
import google.generativeai as genai
from google.generativeai import types
from google.generativeai.types import HarmCategory, HarmBlockThreshold
from google.api_core import exceptions as google_api_core_exceptions
from .translation import tr
from .constants import AVAILABLE_MODELS, DEFAULT_MODEL

class GeminiWorker(QObject):

    finished = pyqtSignal(str)
    error = pyqtSignal(str)

    def __init__(self, api_key, model_name_from_settings, prompt_text, docs_context=""):
        super().__init__()
        self.api_key = api_key
        self.model_name = model_name_from_settings if model_name_from_settings and model_name_from_settings in AVAILABLE_MODELS else DEFAULT_MODEL
        self.prompt_text = prompt_text
        self.docs_context = docs_context
        self._is_running = True

    def stop(self):

        self._is_running = False

    def run(self):

        if not self._is_running: return
        if not self.api_key:
            if self._is_running: self.error.emit(tr("status_api_key_missing"))
            return
        if not self.model_name: # Should be set by __init__ based on settings or DEFAULT_MODEL
            if self._is_running: self.error.emit(tr("status_model_not_selected"))
            return

        try:
            genai.configure(api_key=self.api_key)
        except Exception as e:
            if self._is_running:
                self.error.emit(tr("api_request_failed_err", f"API Key config error: {e}"))
            return
        if not self._is_running: return

        full_prompt = self.prompt_text
        if self.docs_context:
            full_prompt = (
                f"Additional project context:\n{self.docs_context}\n\n"
                f"---\n\nTask:\n{self.prompt_text}"
            )

        try:
            model = genai.GenerativeModel(self.model_name)
            generation_config = types.GenerationConfig(temperature=0.7, max_output_tokens=8192)
            safety_settings = {
                HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            }

            if not self._is_running: return
            response = model.generate_content(
                full_prompt,
                generation_config=generation_config,
                safety_settings=safety_settings
            )
            if not self._is_running: return

            if response.text:
                if self._is_running: self.finished.emit(response.text)
            else:
                error_detail = "No content generated by API."

                if self._is_running: self.error.emit(tr("api_request_failed_err", error_detail))
        except Exception as e: # Catch more general exceptions during API call
            error_type_name = type(e).__name__
            error_message = f"Gemini API Error ({error_type_name}): {str(e)}"
            if isinstance(e, google_api_core_exceptions.ResourceExhausted):
                 error_message += "\n\n" + tr("api_rate_limit_exceeded")
            elif isinstance(e, google_api_core_exceptions.InvalidArgument):
                 error_message += "\n\n" + tr("api_invalid_argument")
            if self._is_running:
                self.error.emit(tr("api_request_failed_err", error_message))
        finally:
            self._is_running = False
